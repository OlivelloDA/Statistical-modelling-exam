sum <-cumsum(X_returns)[length(X)]
return(sum)
}
cumReturnCompute(data$MICROSOFT)
cumReturnCompute <- function(X){
X_returns <- log(diff(X)/(X[-length(X)]))
X_returns[is.na(X_returns)]=0
X_returns
sum <-cumsum(X_returns)[length(X)]
return(sum)
}
cumReturnCompute(data$MICROSOFT)
cumsum(returnCompute(data$MICROSOFT))
cumsum(returnCompute(data$MICROSOFT))[length(data$MICROSOFT)]
cumsum(returnCompute(data$MICROSOFT))[length(data$MICROSOFT)-1]
length(data$MICROSOFT)
cumReturnCompute <- function(X){
X_returns <- log(diff(X)/(X[-length(X)]))
X_returns[is.na(X_returns)]=0
X_returns
sum <-cumsum(X_returns)[length(X)-1]
return(sum)
}
cumReturnCompute(data$MICROSOFT)
cumReturnCompute <- function(X){
X_returns <- log(diff(X)/(X[-length(X)]))
X_returns[is.na(X_returns)]=0
X_returns
sum <-cumsum(X_returns)[length(X_returns)-1]
return(sum)
}
cumReturnCompute(data$MICROSOFT)
cumsum(returnCompute(data$CREDIT.SUISSE.ASST.MAN.))[length(data$CREDIT.SUISSE.ASST.MAN.)-1]
plot(returnCompute(data$MICROSOFT)
,cumsum(returnCompute(data$MICROSOFT))[length(data$MICROSOFT)-1]
)
library(ggplot2)
microsoft <- c(returnCompute(data$MICROSOFT),cumsum(returnCompute(data$MICROSOFT))[length(data$MICROSOFT)-1]
)
microsoft <- data.frame(returnCompute(data$MICROSOFT),cumsum(returnCompute(data$MICROSOFT))[length(data$MICROSOFT)-1]
)
View(microsoft)
View(microsoft)
View(microsoft)
View(microsoft)
setnames(microsoft,"return", "cumReturn")
View(microsoft)
View(microsoft)
View(microsoft)
View(microsoft)
ggplot(microsoft, aes(microsoft)) +
geom_line(aes(y = microsoft[0,1], colour = "var0")) +
geom_line(aes(y = microsoft[0,2], colour = "var1"))
data$Date <- as.Date(data$Date, "%y-%d-%b")
ggplot(microsoft, aes(Date)) +
geom_line(aes(y = microsoft[0,1], colour = "var0")) +
geom_line(aes(y = microsoft[0,2], colour = "var1"))
View(data)
View(data)
data <- read.csv(file.choose(),sep = ";",row.names = 1,header = TRUE)
data <- cbind(Date = rownames(data), data)
rownames(data) <- 1:nrow(data)
View(data)
View(data)
p1 <- ggplot(data, aes(Date,microsoft[0,1])) + geom_line(colour = "red")
microsoft <- data.frame(returnCompute(data$MICROSOFT),cumsum(returnCompute(data$MICROSOFT))[length(data$MICROSOFT)-1]
,data$Date)
library(dplyr)
library(tidypredict)
lm(Y~., data = data)
lm(Y~., data = returnCompute(data$MICROSOFT))
lm(return~returnCompute(data$MICROSOFT[-1])+returnCompute(data$MICROSOFT[-2]), data = returnCompute(data$MICROSOFT))
lm(return~returnCompute(data$MICROSOFT[-1])+returnCompute(data$MICROSOFT[-2]),
data = returnCompute(data$MICROSOFT))
cov(data, method = "pearson")
View(data)
View(data)
returnData <- c(data$Date,
returnCompute(data$MICROSOFT)
returnCompute(data$CREDIT.SUISSE.ASST.MAN.)
returnCompute(data$BOEING)
returnCompute(data$COCA.COLA)
returnCompute(data$NIKE))
returnData <- c(data$Date,
returnCompute(data$MICROSOFT),
returnCompute(data$CREDIT.SUISSE.ASST.MAN.),
returnCompute(data$BOEING),
returnCompute(data$COCA.COLA),
returnCompute(data$NIKE))
logReturnData <- c(data$Date,
logReturnCompute(data$MICROSOFT),
logReturnCompute(data$CREDIT.SUISSE.ASST.MAN.),
logReturnCompute(data$BOEING),
logReturnCompute(data$COCA.COLA),
logReturnCompute(data$NIKE))
returnData <- data.frame(data$Date,
returnCompute(data$MICROSOFT),
returnCompute(data$CREDIT.SUISSE.ASST.MAN.),
returnCompute(data$BOEING),
returnCompute(data$COCA.COLA),
returnCompute(data$NIKE))
returnData <- data.frame(data$Date[-1],
returnCompute(data$MICROSOFT),
returnCompute(data$CREDIT.SUISSE.ASST.MAN.),
returnCompute(data$BOEING),
returnCompute(data$COCA.COLA),
returnCompute(data$NIKE))
logReturnData <- data.frame(data$Date[-1],
logReturnCompute(data$MICROSOFT),
logReturnCompute(data$CREDIT.SUISSE.ASST.MAN.),
logReturnCompute(data$BOEING),
logReturnCompute(data$COCA.COLA),
logReturnCompute(data$NIKE))
View(returnData)
View(returnData)
cov(returnData, method = "pearson")
cov(returnData, method = c("pearson")
cov(returnData, method = c("pearson"))
cov(returnData, method = "pearson")
View(returnData)
View(returnData)
cov(returnData[,1*], method = "pearson")
cov(returnData[,1], method = "pearson")
cov(returnData[,1:6], method = "pearson")
View(returnData)
View(returnData)
cov(returnData[,1:6], method = "pearson")
cov(returnData[,1:6])
cov(returnData)
cov(returnData[,1:6])
cov(returnData[,2:6])
library(timeDate)
library(dynlm)
library(zoo)
library(dynlm)
library(zoo)
library(dynlm)
library(dynlm)
dfm <- dynlm(returnData ~ L(returnData, 1) + L(returnData, 2))
lm(return~returnCompute(data$MICROSOFT[3:end])+
returnCompute(data$MICROSOFT[2:(end-1)])+
returnCompute(data$MICROSOFT[1:(end-2)]),
data = returnCompute(data$MICROSOFT))
MyFunction <- function(data){
m=mean(data)
std=sd(data)
skw=skewness(data)
kur=kurtosis(data)
results=c(m,std,skw,kur)
print(results)
}
MyFunction(returnCompute(data$MICROSOFT))
simulation_AR = rnorm(10000,mean = mean(returnCompute(data$MICROSOFT)), sd = sd(returnCompute(data$MICROSOFT)))
simulation_AR_MICR = rnorm(10000,mean = mean(returnCompute(data$MICROSOFT)), sd = sd(returnCompute(data$MICROSOFT)))
mean(simulation_AR_MICR)
var_sim_AR_MICR = sd(simualtion_AR_MICR)^2
var_sim_AR_MICR = sd(simulation_AR_MICR)^2
var_sim_AR_MICR
View(returnData)
View(returnData)
View(returnData)
returnData[returnData$data.Date..1.<'26/10/1994']
View(returnData)
View(returnData)
returnData[returnData$data.Date..1.<"26/10/1994"]
returnData[returnData$data.Date..1.<"26/10/1994"]
first = returnData[returnData$data.Date..1.<="26/10/1994"]
second = returnData[returnData$data.Date..1.>"26/10/1994"&returnData$data.Date..1.<="26/10/1996"]
returnData$data.Date..1.
colnames(returnData)[1] <- "Date"
View(returnData)
View(returnData)
first_w = returnData[returnData$Date<="26/10/1994"]
first_w = returnData[returnData$Date<="26/10/1994"]
second_w = returnData[returnData$Date>"26/10/1994" & returnData$Date<="26/10/1996"]
colnames(returnData)[1] <- "Date"
colnames(returnData)[2] <- "MICROSOFT"
colnames(returnData)[3] <- "CREDIT.SUISSE.ASST.MAN."
colnames(returnData)[4] <- "BOEING"
colnames(returnData)[5] <- "COCA.COLA"
colnames(returnData)[6] <- "NIKE"
colnames(logReturnData)[1] <- "Date"
colnames(logReturnData)[2] <- "MICROSOFT"
colnames(logReturnData)[3] <- "CREDIT.SUISSE.ASST.MAN."
colnames(logReturnData)[4] <- "BOEING"
colnames(logReturnData)[5] <- "COCA.COLA"
colnames(logReturnData)[6] <- "NIKE"
require("jsonlite");require("plyr")
getYHOOOC = function(symbol,x)
{
url <- paste0('https://query2.finance.yahoo.com/v7/finance/options/',symbol,
'?&date=',x)
chain <- fromJSON(url)
chain <- as.vector(chain)
# CALLS
CALLS <- as.data.frame(do.call(rbind,chain$optionChain$result$options[[1]]$calls))
# FIX THE TIMESTAMPS
CALLS$lastTradeDate <- as.Date(as.POSIXct(as.numeric(as.character(CALLS$lastTradeDate)),
origin = "1970-01-01",tz="EST"))
CALLS$expiration <- as.Date(as.POSIXct(as.numeric(as.character(CALLS$expiration)),
origin = "1970-01-01",tz="EST"))
# CALL/PUT
NOMS <- c(names(CALLS),"type")
CALLS <- cbind(CALLS,as.data.frame(rep("c",nrow(CALLS))))
colnames(CALLS) <- NOMS
# PUTS
PUTS <- as.data.frame(do.call(rbind,chain$optionChain$result$options[[1]]$puts))
# FIX THE TIMESTAMPS
PUTS$lastTradeDate <- as.Date(as.POSIXct(as.numeric(as.character(PUTS$lastTradeDate)),
origin = "1970-01-01",tz="EST"))
PUTS$expiration <- as.Date(as.POSIXct(as.numeric(as.character(PUTS$expiration)),
origin = "1970-01-01",tz="EST"))
# CALL/PUT
NOMS <- c(names(PUTS),"type")
PUTS <- cbind(PUTS,as.data.frame(rep("p",nrow(PUTS))))
colnames(PUTS) <- NOMS
# CALLS/PUTS COMBINED
OC <- rbind(CALLS,PUTS)
OC
}
getOC = function(x)
{
symbol <- as.character(x)
# TEST
url <- paste0('https://query2.finance.yahoo.com/v7/finance/options/',symbol,
'?&date=1471564800')
chain <- try(fromJSON(url))
if(!inherits(chain,'try-error'))
{
# ALL EXPIRATIONS DATES
chain <- as.vector(chain)
EXP <- chain$optionChain$result$expirationDates
# apply a function
all <- lapply(as.list(EXP)[[1]], function(x){
tmp <- try(getYHOOOC(symbol=symbol, x))
if(!inherits(tmp,'try-error'))
tmp
})
# COMBINE ALL EXPIRATIONS
ALL <- do.call(rbind,all)
# GET ALL THE METADATA
LIST1 <- chain$optionChain$result$quote
METADATA <- as.data.frame(do.call(cbind,LIST1))
# WANT <- names(METADATA)
WANT <- c("regularMarketChangePercent","regularMarketPreviousClose","bid","ask",
"bidSize","askSize","averageDailyVolume3Month","averageDailyVolume10Day",
"fiftyTwoWeekLowChange","fiftyTwoWeekLowChangePercent","fiftyTwoWeekHighChange",
"fiftyTwoWeekHighChangePercent","fiftyTwoWeekLow","fiftyTwoWeekHigh",
"dividendDate","earningsTimestamp","trailingAnnualDividendRate","trailingPE",
"epsTrailingTwelveMonths","epsForward","sharesOutstanding",
"twoHundredDayAverageChangePercent","bookValue","fiftyDayAverage",
"fiftyDayAverageChange","fiftyDayAverageChangePercent","twoHundredDayAverage",
"twoHundredDayAverageChange","marketCap","forwardPE","priceToBook",
"preMarketChange","preMarketChangePercent","preMarketTime","preMarketPrice",
"regularMarketPrice","regularMarketTime","regularMarketChange",
"regularMarketOpen","regularMarketDayHigh","regularMarketDayLow",
"regularMarketVolume","symbol"
)
METADATA <- METADATA[,names(METADATA) %in% WANT]
ALL <- rbind.fill(cbind(ALL,METADATA))
ALL
}
}
OC <- getOC("NKE")
equire("jsonlite");require("plyr")
getYHOOOC = function(symbol,x)
{
url <- paste0('https://query2.finance.yahoo.com/v7/finance/options/',symbol,
'?&date=',x)
chain <- fromJSON(url)
chain <- as.vector(chain)
# CALLS
CALLS <- as.data.frame(do.call(rbind,chain$optionChain$result$options[[1]]$calls))
# FIX THE TIMESTAMPS
CALLS$lastTradeDate <- as.Date(as.POSIXct(as.numeric(as.character(CALLS$lastTradeDate)),
origin = "2020-01-01",tz="EST"))
CALLS$expiration <- as.Date(as.POSIXct(as.numeric(as.character(CALLS$expiration)),
origin = "2020-01-01",tz="EST"))
# CALL/PUT
NOMS <- c(names(CALLS),"type")
CALLS <- cbind(CALLS,as.data.frame(rep("c",nrow(CALLS))))
colnames(CALLS) <- NOMS
# PUTS
PUTS <- as.data.frame(do.call(rbind,chain$optionChain$result$options[[1]]$puts))
# FIX THE TIMESTAMPS
PUTS$lastTradeDate <- as.Date(as.POSIXct(as.numeric(as.character(PUTS$lastTradeDate)),
origin = "1970-01-01",tz="EST"))
PUTS$expiration <- as.Date(as.POSIXct(as.numeric(as.character(PUTS$expiration)),
origin = "1970-01-01",tz="EST"))
# CALL/PUT
NOMS <- c(names(PUTS),"type")
PUTS <- cbind(PUTS,as.data.frame(rep("p",nrow(PUTS))))
colnames(PUTS) <- NOMS
# CALLS/PUTS COMBINED
OC <- rbind(CALLS,PUTS)
OC
}
getOC = function(x)
{
symbol <- as.character(x)
# TEST
url <- paste0('https://query2.finance.yahoo.com/v7/finance/options/',symbol,
'?&date=1471564800')
chain <- try(fromJSON(url))
if(!inherits(chain,'try-error'))
{
# ALL EXPIRATIONS DATES
chain <- as.vector(chain)
EXP <- chain$optionChain$result$expirationDates
# apply a function
all <- lapply(as.list(EXP)[[1]], function(x){
tmp <- try(getYHOOOC(symbol=symbol, x))
if(!inherits(tmp,'try-error'))
tmp
})
# COMBINE ALL EXPIRATIONS
ALL <- do.call(rbind,all)
# GET ALL THE METADATA
LIST1 <- chain$optionChain$result$quote
METADATA <- as.data.frame(do.call(cbind,LIST1))
# WANT <- names(METADATA)
WANT <- c("regularMarketChangePercent","regularMarketPreviousClose","bid","ask",
"bidSize","askSize","averageDailyVolume3Month","averageDailyVolume10Day",
"fiftyTwoWeekLowChange","fiftyTwoWeekLowChangePercent","fiftyTwoWeekHighChange",
"fiftyTwoWeekHighChangePercent","fiftyTwoWeekLow","fiftyTwoWeekHigh",
"dividendDate","earningsTimestamp","trailingAnnualDividendRate","trailingPE",
"epsTrailingTwelveMonths","epsForward","sharesOutstanding",
"twoHundredDayAverageChangePercent","bookValue","fiftyDayAverage",
"fiftyDayAverageChange","fiftyDayAverageChangePercent","twoHundredDayAverage",
"twoHundredDayAverageChange","marketCap","forwardPE","priceToBook",
"preMarketChange","preMarketChangePercent","preMarketTime","preMarketPrice",
"regularMarketPrice","regularMarketTime","regularMarketChange",
"regularMarketOpen","regularMarketDayHigh","regularMarketDayLow",
"regularMarketVolume","symbol"
)
METADATA <- METADATA[,names(METADATA) %in% WANT]
ALL <- rbind.fill(cbind(ALL,METADATA))
ALL
}
}
OC <- getOC("NKE")
studentnumber =787524
fulldata = read.csv("HousePrices.txt", sep = " ", header = TRUE)
digitsum = function(x) sum(floor(x/10^(0:(nchar(x)-1)))%%10)
set.seed(studentnumber)
mysum = digitsum(studentnumber)
if((mysum %% 2) == 0) { # number is even
rownumbers = sample(1:327,150,replace=F)
} else { # number is odd
rownumbers = sample(309:585,150,replace=F)
}
mydata = fulldata[rownumbers,]
studentnumber =787524
fulldata = read.csv("HousePrices.txt", sep = " ", header = TRUE)
digitsum = function(x) sum(floor(x/10^(0:(nchar(x)-1)))%%10)
set.seed(studentnumber)
mysum = digitsum(studentnumber)
if((mysum %% 2) == 0) { # number is even
rownumbers = sample(1:327,150,replace=F)
} else { # number is odd
rownumbers = sample(309:585,150,replace=F)
}
mydata = fulldata[rownumbers,]
studentnumber =787524
fulldata = read.csv("HousePrices.txt", sep = " ", header = TRUE)
digitsum = function(x) sum(floor(x/10^(0:(nchar(x)-1)))%%10)
set.seed(studentnumber)
mysum = digitsum(studentnumber)
if((mysum %% 2) == 0) { # number is even
rownumbers = sample(1:327,150,replace=F)
} else { # number is odd
rownumbers = sample(309:585,150,replace=F)
}
mydata = fulldata[rownumbers,]
studentnumber =787524
fulldata = read.csv("HousePrices.txt", sep = " ", header = TRUE)
digitsum = function(x) sum(floor(x/10^(0:(nchar(x)-1)))%%10)
set.seed(studentnumber)
mysum = digitsum(studentnumber)
if((mysum %% 2) == 0) { # number is even
rownumbers = sample(1:327,150,replace=F)
} else { # number is odd
rownumbers = sample(309:585,150,replace=F)
}
mydata = fulldata[rownumbers,]
studentnumber =787524
fulldata = read.csv("HousePrices.txt", sep = " ", header = TRUE)
digitsum = function(x) sum(floor(x/10^(0:(nchar(x)-1)))%%10)
set.seed(studentnumber)
mysum = digitsum(studentnumber)
if((mysum %% 2) == 0) { # number is even
rownumbers = sample(1:327,150,replace=F)
} else { # number is odd
rownumbers = sample(309:585,150,replace=F)
}
install.packages("rstudioapi", dependencies = TRUE)
library(rstudioapi)
currentDir <- dirname(getActiveDocumentContext()$path)
currentDir
setwd(currentDir)
fulldata = read.csv("HousePrices.txt", sep = " ", header = TRUE)
digitsum = function(x) sum(floor(x/10^(0:(nchar(x)-1)))%%10)
set.seed(studentnumber)
mysum = digitsum(studentnumber)
if((mysum %% 2) == 0) { # number is even
rownumbers = sample(1:327,150,replace=F)
} else { # number is odd
rownumbers = sample(309:585,150,replace=F)
}
mydata = fulldata[rownumbers,]
priceHouse = mydata$PriceHouse
meanIncome = mydata$MeanIncome
healthSocial = mydata$HealthSocial
industries = mydata$Industries
hotelRestaurant = mydata$HotelRestaurant
alpha = c(0,1,.5)
for (a in alpha){
glmnet_fit  <- glmnet(mydata,priceHouse,alpha = a)
cv_fit <- cv.glmnet(mydata,priceHouse,alpha = a)
plot(cv_fit)
}
library(glmnet)
alpha = c(0,1,.5)
for (a in alpha){
glmnet_fit  <- glmnet(mydata,priceHouse,alpha = a)
cv_fit <- cv.glmnet(mydata,priceHouse,alpha = a)
plot(cv_fit)
}
for (a in alpha){
glmnet_fit  <- glmnet(mydata,priceHouse,alpha = a)
cv_fit <- cv.glmnet(mydata,priceHouse,alpha = a)
plot(cv_fit)
alpha = c(0,1,.5)
for (a in alpha){
glmnet_fit  <- glmnet(mydata,priceHouse,alpha = a)
cv_fit <- cv.glmnet(mydata,priceHouse,alpha = a)
plot(cv_fit)
}
alpha = c(0,1,.5)
for (a in alpha){
glmnet_fit  <- glmnet(mydata,priceHouse,alpha = a)
cv_fit <- cv.glmnet(mydata,priceHouse,alpha = a)
plot(cv_fit)
}
glmnet_fit  <- glmnet(mydata,priceHouse,alpha = a)
alpha = c(0,1,.5)
for (a in alpha){
glmnet_fit  <- glmnet(mydata,priceHouse,alpha = a)
cv_fit <- cv.glmnet(mydata,priceHouse,alpha = a)
plot(cv_fit)
}
s <- cv_fit$lambda.min #minimum lambda value(the best, cross validation is included)
cv_fit
cv_fit
install.packages("rstudioapi", dependencies = TRUE)
library(rstudioapi)
currentDir <- dirname(getActiveDocumentContext()$path)
currentDir
setwd(currentDir)
studentnumber =787524
fulldata = read.csv("HousePrices.txt", sep = " ", header = TRUE)
digitsum = function(x) sum(floor(x/10^(0:(nchar(x)-1)))%%10)
set.seed(studentnumber)
mysum = digitsum(studentnumber)
if((mysum %% 2) == 0) { # number is even
rownumbers = sample(1:327,150,replace=F)
} else { # number is odd
rownumbers = sample(309:585,150,replace=F)
}
mydata = fulldata[rownumbers,]
#1
#model for the median house price
#Use semiparametric flexible modelling
#not treat covariates as random effects.
# 1.A Construct at least three different semiparametric models (the models are required to have at
# least one nonparametric component) and use AIC as a method to select a final semiparametric
# model. Describe which models were part of the search.
library(SemiPar)
priceHouse = mydata$PriceHouse
meanIncome = mydata$MeanIncome
healthSocial = mydata$HealthSocial
industries = mydata$Industries
hotelRestaurant = mydata$HotelRestaurant
install.packages("rstudioapi", dependencies = TRUE)
library(rstudioapi)
currentDir <- dirname(getActiveDocumentContext()$path)
currentDir
setwd(currentDir)
studentnumber =787524
fulldata = read.csv("HousePrices.txt", sep = " ", header = TRUE)
digitsum = function(x) sum(floor(x/10^(0:(nchar(x)-1)))%%10)
set.seed(studentnumber)
mysum = digitsum(studentnumber)
if((mysum %% 2) == 0) { # number is even
rownumbers = sample(1:327,150,replace=F)
} else { # number is odd
rownumbers = sample(309:585,150,replace=F)
}
mydata = fulldata[rownumbers,]
#1
#model for the median house price
#Use semiparametric flexible modelling
#not treat covariates as random effects.
# 1.A Construct at least three different semiparametric models (the models are required to have at
# least one nonparametric component) and use AIC as a method to select a final semiparametric
# model. Describe which models were part of the search.
library(SemiPar)
priceHouse = mydata$PriceHouse
meanIncome = mydata$MeanIncome
healthSocial = mydata$HealthSocial
industries = mydata$Industries
hotelRestaurant = mydata$HotelRestaurant
